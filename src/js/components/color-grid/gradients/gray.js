import {
  COLOR_LOWER,
  COLOR_UPPER,
  DELTA,
  L_GRADIENT_RANGE,
  S_GRADIENT_RANGE
} from './gray-constants';
import { generateHSLGradient } from 'helpers/hsl';
import { GRADIENT_LEN } from '../constants';
import RGBColor from 'models/rgb-color';
import { shuffleArray } from 'helpers/array';

/*
 * Generates a series of `Gradient`s with gray base
 * colors in the HSL color space.
 *
 * Gradients are generated such that their
 * base colors are somewhat (but not prefectly) spaced
 * around the HSL color space to avoid two similar colors.
 *
 * Generates a total of `count` `Gradient` objects.
 */
const generateGrayGradients = (count) => {
  /*
   * It's easier to generate gray-ish colors in the
   * RGB color space and then convert them to HSL.
   *
   * RGB Gray's are generated by selecting R, G, and B
   * values close to each other.
   *
   * When all three values are equal, they produce a pure
   * gray. However for some variation, we randomly select
   * 3 channels within `DELTA` units of each other.
   *
   * We also randomize the order of R, G, and B so that
   * we generate values across several Hues in the HSL color
   * space.
   */

  const gradients = [];

  for (let i = 1; i <= count; i++) {
    const color = COLOR_LOWER + (COLOR_UPPER - COLOR_LOWER) * Math.random();
    const rgb = shuffleArray([
      color,
      color + DELTA * Math.random(),
      color + DELTA * Math.random()
    ]);

    /*
     * Generate the base color, specifying the H, S, and L
     * bounds.
     */
    const baseColor = new RGBColor(rgb[0], rgb[1], rgb[2]);

    // Generate the gradient around the base color
    gradients.push(
      generateHSLGradient(
        baseColor,
        GRADIENT_LEN,
        S_GRADIENT_RANGE,
        L_GRADIENT_RANGE
      )
    );
  }

  return gradients;
};

/*
 * Generates a series of `Gradient`s in the HSL color space
 * given a list of (gray) base colors
 */
const generateGrayGradientsFromBaseColors = (baseColors) => {
  return baseColors.map((baseColor) => {
    return generateHSLGradient(
      baseColor,
      GRADIENT_LEN,
      S_GRADIENT_RANGE,
      L_GRADIENT_RANGE
    );
  });
};

export { generateGrayGradients, generateGrayGradientsFromBaseColors };
