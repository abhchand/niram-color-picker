import { expect } from 'chai';
import Gradient from 'models/gradient';
import HexColor from 'models/hex-color';
import HSLColor from 'models/hsl-color';
import RGBColor from 'models/rgb-color';
import { toScss } from 'components/color-export/scss';

describe('toScss()', () => {
  beforeEach(() => {
    jest.spyOn(window, 'window', 'get').mockImplementation(() => ({
      location: { href: 'https://www.example.com' }
    }));
  });

  /*
   * This test suite uses the following set of colors for testing.
   * These were selected as evenly spaced values that convert
   * easily between all color spaces
   *
   *   Color      HSL                Hex         RGB
   * ---------------------------------------------------------
   *   Black      (0°, 0%, 0%)       #000000     (0, 0, 0)
   *   White      (0°, 0%, 100%)     #FFFFFF     (255, 255, 255)
   *   Red        (0°, 100%, 50%)    #FF0000     (255, 0, 0)
   *   Lime       (120°, 100%, 50%)  #00FF00     (0, 255, 0)
   *   Blue       (240°, 100%, 50%)  #0000FF     (0, 0, 255)
   *   Yellow     (60°, 100%, 50%)   #FFFF00     (255, 255, 0)
   *   Magenta    (300°, 100%, 50%)  #FF00FF     (255, 0, 255)
   *   Gray       (0°, 0%, 50%)      #808080     (128, 128, 128)
   *   Green      (120°, 100%, 25%)  #008000     (0, 128, 0)
   *   Purple     (300°, 100%, 25%)  #800080     (128, 0, 128)
   *   Teal       (180°, 100%, 25%)  #008080     (0, 128, 128)
   *   Navy       (240°, 100%, 25%)  #000080     (0, 0, 128)
   */

  const rgbScss = `
/*
 * Generated by Niram Color Picker
 * https://www.example.com
 */

$primary_0_100: rgb(0, 0, 0);
$primary_0_200: rgb(255, 255, 255);
$primary_0_300: rgb(255, 0, 0);
$neutral_0_100: rgb(0, 255, 0);
$neutral_0_200: rgb(0, 0, 255);
$neutral_0_300: rgb(255, 255, 0);
$accent_0_100: rgb(255, 0, 255);
$accent_0_200: rgb(128, 128, 128);
$accent_0_300: rgb(0, 128, 0);
$accent_1_100: rgb(128, 0, 128);
$accent_1_200: rgb(0, 128, 128);
$accent_1_300: rgb(0, 0, 128);
`;

  const hexScss = `
/*
 * Generated by Niram Color Picker
 * https://www.example.com
 */

$primary_0_100: #000000;
$primary_0_200: #FFFFFF;
$primary_0_300: #FF0000;
$neutral_0_100: #00FF00;
$neutral_0_200: #0000FF;
$neutral_0_300: #FFFF00;
$accent_0_100: #FF00FF;
$accent_0_200: #808080;
$accent_0_300: #008000;
$accent_1_100: #800080;
$accent_1_200: #008080;
$accent_1_300: #000080;
`;

  const hslScss = `
/*
 * Generated by Niram Color Picker
 * https://www.example.com
 */

$primary_0_100: hsl(0.0, 0.00%, 0.00%);
$primary_0_200: hsl(0.0, 0.00%, 100.00%);
$primary_0_300: hsl(0.0, 100.00%, 50.00%);
$neutral_0_100: hsl(120.0, 100.00%, 50.00%);
$neutral_0_200: hsl(240.0, 100.00%, 50.00%);
$neutral_0_300: hsl(60.0, 100.00%, 50.00%);
$accent_0_100: hsl(300.0, 100.00%, 50.00%);
$accent_0_200: hsl(0.0, 0.00%, 50.00%);
$accent_0_300: hsl(120.0, 100.00%, 25.00%);
$accent_1_100: hsl(300.0, 100.00%, 25.00%);
$accent_1_200: hsl(180.0, 100.00%, 25.00%);
$accent_1_300: hsl(240.0, 100.00%, 25.00%);
`;

  let colorGrid;

  describe('RGB', () => {
    beforeEach(() => {
      colorGrid = {
        primary: [
          new Gradient([
            new RGBColor(0, 0, 0),
            new RGBColor(255, 255, 255),
            new RGBColor(255, 0, 0)
          ])
        ],
        neutral: [
          new Gradient([
            new RGBColor(0, 255, 0),
            new RGBColor(0, 0, 255),
            new RGBColor(255, 255, 0)
          ])
        ],
        accent: [
          new Gradient([
            new RGBColor(255, 0, 255),
            new RGBColor(128, 128, 128),
            new RGBColor(0, 128, 0)
          ]),
          new Gradient([
            new RGBColor(128, 0, 128),
            new RGBColor(0, 128, 128),
            new RGBColor(0, 0, 128)
          ])
        ]
      };
    });

    it('generates the SCSS definition', () => {
      expect(toScss(colorGrid, 'rgb')).to.equal(rgbScss);
    });

    it('handles non-RGB colors gracefully', () => {
      colorGrid.primary[0].set(0, new HexColor('000000'));
      colorGrid.primary[0].set(1, new HSLColor(0, 0, 1));

      expect(toScss(colorGrid, 'rgb')).to.equal(rgbScss);
    });
  });

  describe('Hex', () => {
    beforeEach(() => {
      colorGrid = {
        primary: [
          new Gradient([
            new HexColor('000000'),
            new HexColor('FFFFFF'),
            new HexColor('FF0000')
          ])
        ],
        neutral: [
          new Gradient([
            new HexColor('00FF00'),
            new HexColor('0000FF'),
            new HexColor('FFFF00')
          ])
        ],
        accent: [
          new Gradient([
            new HexColor('FF00FF'),
            new HexColor('808080'),
            new HexColor('008000')
          ]),
          new Gradient([
            new HexColor('800080'),
            new HexColor('008080'),
            new HexColor('000080')
          ])
        ]
      };
    });

    it('generates the SCSS definition', () => {
      expect(toScss(colorGrid, 'hex')).to.equal(hexScss);
    });

    it('handles non-Hex colors gracefully', () => {
      colorGrid.primary[0].set(0, new RGBColor(0, 0, 0));
      colorGrid.primary[0].set(1, new HSLColor(0, 0, 1));

      expect(toScss(colorGrid, 'hex')).to.equal(hexScss);
    });
  });

  describe('HSL', () => {
    beforeEach(() => {
      colorGrid = {
        primary: [
          new Gradient([
            new HSLColor(0.0, 0, 0),
            new HSLColor(0.0, 0, 1),
            new HSLColor(0.0, 1, 0.5)
          ])
        ],
        neutral: [
          new Gradient([
            new HSLColor(120.0, 1, 0.5),
            new HSLColor(240.0, 1, 0.5),
            new HSLColor(60.0, 1, 0.5)
          ])
        ],
        accent: [
          new Gradient([
            new HSLColor(300.0, 1, 0.5),
            new HSLColor(0.0, 0, 0.5),
            new HSLColor(120.0, 1, 0.25)
          ]),
          new Gradient([
            new HSLColor(300.0, 1, 0.25),
            new HSLColor(180.0, 1, 0.25),
            new HSLColor(240.0, 1, 0.25)
          ])
        ]
      };
    });

    it('generates the SCSS definition', () => {
      expect(toScss(colorGrid, 'hsl')).to.equal(hslScss);
    });

    it('handles non-HSL colors gracefully', () => {
      colorGrid.primary[0].set(0, new RGBColor(0, 0, 0));
      colorGrid.primary[0].set(1, new HexColor('FFFFFF'));

      expect(toScss(colorGrid, 'hsl')).to.equal(hslScss);
    });
  });
});
